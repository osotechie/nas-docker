name: SCAN IMAGES

on:
  #pull_request:
  #  branches:
  #    - main
  #  paths-ignore:
  #      - '**/*.md'
  
  # manually
  workflow_dispatch:
  
  # schedule
  #schedule:
  #  - cron: '40 9 * * 2'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:


  prep:
    runs-on: ubuntu-latest

    outputs:
      images: ${{ steps.getimages.outputs.images }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Process docker-compose.yml for images
        id: getimages
        run: |
          search_dir="./"

          # Find all docker-compose.yml files recursively
          compose_files=$(find "$search_dir" -type f -name 'docker-compose.yml')

          # Array to store unique image names
          declare -A images_map

          # Loop through each docker-compose.yml file found
          for file in $compose_files; do
              echo "Checking file: $file"
              # Extract image names using grep and sed (or awk)
              images=$(grep -E '^\s*image:' "$file" | sed -e 's/^\s*image:\s*//' -e 's/^\s*//' -e 's/\s*$//')

              # Loop through each image found in the current file
              for image in $images; do
                  # Store image name in the associative array to ensure uniqueness
                  images_map["$image"]=1
              done
          done

          # Convert associative array to indexed array
          for image in "${!images_map[@]}"; do
              images_array+=("$image")
          done

          # Convert indexed array to JSON array format
          json_output=$(jq -n --argjson arr "$(printf '%s\n' "${images_array[@]}" | jq -R . | jq -s .)" '{"image": $arr}')


          # Output images in the desired array format
          echo "images="$json_output >> $GITHUB_OUTPUT
  
  scan:
    runs-on: ubuntu-latest

    needs: prep

    strategy:
      matrix: ${{fromJson(needs.prep.outputs.images)}}

    steps:

      # Run Trivy docker image scan
      - name: Run Trivy image vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          format: "sarif"
          output: "trivy-${{ matrix.image }}.sarif"
          ignore-unfixed: true
          vuln-type: "os,library"
          security-checks: "vuln"

      # Upload image report to GitHub Security
      - name: Upload Trivy image scan results
        id: upload-results
        uses: github/codeql-action/upload-sarif@v2
        with:
          category: "trivy-${{ matrix.image }}"
          sarif_file: "trivy-${{ matrix.image }}.sarif"